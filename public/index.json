[
{
	"uri": "//localhost:1313/2-deloyment/1-create-a-virtual-private-cloud-vpc/",
	"title": "Create a Virtual Private Cloud (VPC)",
	"tags": [],
	"description": "",
	"content": "Tạo Virtual Private Cloud (VPC) trên AWS – Hướng dẫn chi tiết Virtual Private Cloud (VPC) là mạng riêng ảo trong AWS, cho phép bạn kiểm soát hoàn toàn môi trường mạng, như dải IP, subnet, route table, gateway… giúp bảo mật và tối ưu hạ tầng.\nBước 1: Đăng nhập AWS Management Console Truy cập https://aws.amazon.com/console và đăng nhập tài khoản AWS của bạn. Bước 2: Mở dịch vụ VPC Tại thanh tìm kiếm trên cùng (Search Services), gõ VPC và chọn dịch vụ VPC. Bước 3: Bắt đầu tạo VPC mới Trong bảng điều khiển (VPC Dashboard), bấm Create VPC (nút màu xanh bên phải). Bước 4: Cấu hình thông số cho VPC Name tag: Nhập tên cho VPC, ví dụ RL-Platform-VPC.\nIPv4 CIDR block: Nhập dải IP cho VPC, ví dụ 10.0.0.0/16.\nĐây là dải mạng riêng, bạn có thể tùy chỉnh nhưng phải tuân thủ chuẩn CIDR. Dải này cho phép 65,536 địa chỉ IP.\nIPv6 CIDR block (optional):\nNếu bạn muốn hỗ trợ IPv6, chọn Amazon-provided IPv6 CIDR block hoặc bỏ qua nếu không cần. Tenancy:\nChọn Default (shared hardware) thường dùng cho hầu hết ứng dụng. Chọn Dedicated nếu muốn tài nguyên vật lý dành riêng, chi phí cao hơn. Bước 5: Tạo VPC Bấm nút Create VPC bên dưới để tạo.\nHệ thống sẽ hiện thông báo thành công cùng các thông tin VPC bạn vừa tạo.\nBước 6: Tạo Subnets (Mạng con) Trong menu bên trái, chọn Subnets.\nBấm Create subnet.\nTên subnet: Ví dụ Public-Subnet-1.\nVPC: Chọn VPC bạn vừa tạo (RL-Platform-VPC).\nAvailability Zone: Chọn AZ (ví dụ us-east-1a).\nIPv4 CIDR block: Nhập dải nhỏ hơn nằm trong dải của VPC, ví dụ 10.0.1.0/24 (có 256 địa chỉ).\nNhấn Create subnet.\nTương tự, tạo thêm subnet private với CIDR block khác, ví dụ 10.0.2.0/24.\nBước 7: Tạo Internet Gateway (IGW) Chọn Internet Gateways trên menu bên trái.\nBấm Create internet gateway.\nĐặt tên (Tag) như RL-Platform-IGW.\nBấm Create internet gateway.\nSau đó, chọn Internet Gateway vừa tạo, bấm Actions → Attach to VPC.\nChọn RL-Platform-VPC → Attach internet gateway.\nBước 8: Cấu hình Route Table (Bảng định tuyến) Chọn Route Tables trong menu.\nChọn bảng route mặc định của VPC (bảng route sẽ có tên VPC).\nBấm tab Routes → Edit routes.\nThêm route:\nDestination: 0.0.0.0/0 (tất cả lưu lượng IPv4) Target: chọn Internet Gateway (igw-xxxxx) vừa tạo. Lưu lại.\nBước 9: Liên kết Route Table với Subnet Public Vẫn ở bảng route, bấm tab Subnet Associations.\nBấm Edit subnet associations.\nChọn subnet Public-Subnet-1 để liên kết.\nLưu lại.\nBước 10: Tạo Security Groups (Nhóm bảo mật) Vào Security Groups trên menu bên trái.\nBấm Create security group.\nĐặt tên ví dụ: RL-Platform-SG-Public.\nGán vào VPC RL-Platform-VPC.\nTrong phần Inbound rules:\nThêm rule cho phép SSH (port 22) từ IP của bạn (ví dụ YOUR_IP/32) để bảo mật.\nCho phép HTTP (port 80), HTTPS (port 443) từ mọi nơi (0.0.0.0/0).\nLưu rule.\nBước 11: Hoàn thiện và kiểm tra Bạn đã có VPC với:\nMột dải mạng lớn (10.0.0.0/16).\nSubnet public có Internet Gateway và route table.\nSecurity Group cho phép truy cập cần thiết.\nBạn có thể dùng VPC này để khởi tạo EC2 instances, kết nối an toàn trong RL platform.\nLưu ý quan trọng CIDR block cho VPC và subnet phải không được trùng với mạng on-premises nếu bạn thiết lập VPN.\nTận dụng nhiều Availability Zone để tăng độ sẵn sàng.\nLuôn cấu hình Security Group chặt chẽ theo nguyên tắc least privilege.\n"
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction Reinforcement Learning (RL) is a rapidly advancing field of artificial intelligence where agents learn to make decisions by interacting with their environment to maximize cumulative rewards. Unlike supervised learning, RL does not require labeled datasets but instead learns optimal policies through trial and error, which makes it highly applicable in complex, dynamic environments such as robotics, gaming, autonomous driving, and resource management.\nDeploying RL solutions at scale poses several challenges:\nComputational demands: Training RL models requires significant compute power, often necessitating distributed and parallel processing. Dynamic workflows: RL training pipelines involve iterative evaluation, model updates, and data handling, requiring automation and orchestration. Data management: Large volumes of data and model checkpoints must be stored reliably and accessed efficiently. Security and networking: Protecting data and compute resources is essential, especially when working in cloud environments. Scalability: The system must flexibly scale up or down based on workload demands to optimize costs and performance. AWS provides a powerful ecosystem of cloud services that effectively address these challenges. This workshop focuses on using key AWS services to build a robust and scalable RL infrastructure:\nAmazon EC2 (Elastic Compute Cloud): Provides scalable compute capacity in the cloud, enabling the deployment of GPU-enabled instances for intensive RL training workloads. AWS Lambda: A serverless compute service that automates parts of the RL workflow by running code in response to events, reducing operational overhead. Amazon VPC (Virtual Private Cloud): Enables the creation of isolated, secure network environments where RL components can communicate safely. AWS IAM (Identity and Access Management): Controls access to AWS resources with fine-grained permissions, ensuring security and compliance. Amazon S3 (Simple Storage Service): Offers durable and scalable storage for datasets, trained models, logs, and results. Throughout this workshop, you will learn how to provision and configure these services, integrate them into a cohesive RL system, and apply best practices for security and cost management. By the end, you will have a solid foundation for deploying scalable and maintainable RL workloads on AWS.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Reinforcement Learning on AWS Workshop",
	"tags": [],
	"description": "",
	"content": "Reinforcement Learning on AWS Workshop Welcome to the Reinforcement Learning (RL) deployment workshop on AWS.\nThis workshop covers how to build, deploy, and manage scalable RL systems using key AWS services.\nWorkshop Sections Introduction Deployment Services Overview Cleanup Resources "
},
{
	"uri": "//localhost:1313/2-deloyment/2-configuring-identity-and-access-management-iam-on-aws/",
	"title": "Configuring Identity and Access Management (IAM) on AWS",
	"tags": [],
	"description": "",
	"content": "Configuring Identity and Access Management (IAM) on AWS — Hướng dẫn chi tiết IAM là dịch vụ của AWS giúp bạn quản lý an toàn quyền truy cập và điều khiển ai có thể làm gì với các tài nguyên AWS của bạn. Việc cấu hình IAM đúng cách là bước quan trọng để bảo vệ hạ tầng Reinforcement Learning Platform của bạn.\n1. Tạo IAM Users và Groups IAM Users là tài khoản riêng biệt cho người dùng hoặc ứng dụng, được cấp quyền truy cập cụ thể. IAM Groups là tập hợp các user có cùng vai trò công việc, giúp quản lý quyền dễ dàng hơn. Cách làm:\nVào AWS Console → Services → IAM → Users → Add user. Nhập tên user (ví dụ: developer01). Chọn loại truy cập: Programmatic access (API, CLI) AWS Management Console access (giao diện web) Tạo password hoặc để hệ thống tạo ngẫu nhiên. Sau khi tạo user, tạo nhóm (Groups) nếu chưa có: IAM → Groups → Create group. Thêm user vào nhóm theo vai trò (ví dụ: Developers, Admins). 2. Định nghĩa IAM Policies (Chính sách quyền) IAM Policies là các tập lệnh JSON xác định quyền nào được phép hoặc bị từ chối trên tài nguyên AWS. Có 2 loại chính: Managed policies: do AWS cung cấp sẵn, dễ dùng. Customer managed policies: do bạn tự tạo, tùy chỉnh cho nhu cầu riêng. Cách làm:\nIAM → Policies → Create policy. Sử dụng trình soạn thảo visual hoặc nhập JSON. Ví dụ: Policy cho phép EC2 full access, hoặc chỉ cho phép đọc S3. Gán policy cho users, groups hoặc roles. 3. Tạo IAM Roles Roles cho phép cấp quyền tạm thời và cho các dịch vụ AWS (ví dụ EC2, Lambda) “mượn” quyền. Roles rất quan trọng để tránh dùng khóa truy cập cố định trong code. Cách làm:\nIAM → Roles → Create role. Chọn type role, ví dụ: EC2, Lambda. Chọn các policies phù hợp để gán (ví dụ: AmazonS3ReadOnlyAccess). Đặt tên role dễ nhớ (ví dụ: EC2-RL-Platform-Role). EC2 instance hoặc Lambda function sẽ sử dụng role này khi chạy. 4. Kích hoạt Multi-Factor Authentication (MFA) MFA tăng cường bảo mật bằng cách yêu cầu xác thực thêm ngoài mật khẩu, thường là mã OTP trên điện thoại. Bắt buộc cho user có quyền cao hoặc quyền truy cập console. Cách làm:\nIAM → Users → chọn user cần kích hoạt MFA. Tab Security credentials → Manage MFA device. Chọn thiết bị (ví dụ: Virtual MFA device dùng app Google Authenticator). Quét mã QR và nhập mã OTP để kích hoạt. 5. Sử dụng IAM Access Analyzer Access Analyzer giúp bạn phát hiện xem IAM policies có thể làm lộ tài nguyên cho bên ngoài hoặc tài khoản khác không. Cách làm:\nIAM → Access Analyzer → Create analyzer. Chọn vùng và tạo analyzer. Xem báo cáo phân tích quyền truy cập, chỉnh sửa policies nếu cần để đảm bảo không lộ dữ liệu. 6. Kiểm toán và giám sát IAM Activities AWS CloudTrail giúp ghi lại toàn bộ hành động IAM và API gọi tới tài khoản AWS của bạn. AWS Config giúp kiểm tra cấu hình IAM có tuân thủ chính sách bảo mật hay không. AWS Security Hub tổng hợp và cảnh báo các vấn đề bảo mật. Cách làm:\nBật CloudTrail cho toàn bộ tài khoản AWS (Services → CloudTrail). Thiết lập AWS Config để theo dõi thay đổi trong IAM. Sử dụng Security Hub để nhận cảnh báo tự động và đề xuất khắc phục. Best Practices (Thực hành tốt nhất) Áp dụng nguyên tắc Least Privilege: Cấp quyền chỉ đủ để người dùng hoàn thành nhiệm vụ, không thừa. Thường xuyên đổi Access Keys: Để tránh bị rò rỉ hoặc bị tấn công lâu dài. Tránh dùng tài khoản root: Chỉ dùng để thiết lập ban đầu; mọi công việc thường ngày nên dùng IAM users hoặc roles. Dùng resource-based policies: Khi có thể, để kiểm soát quyền trên tài nguyên thay vì user, giúp quản lý linh hoạt hơn. "
},
{
	"uri": "//localhost:1313/2-deloyment/",
	"title": "Deployment Steps",
	"tags": [],
	"description": "",
	"content": "Deployment Deploying a Reinforcement Learning (RL) system on AWS involves setting up and configuring several core cloud resources to provide a secure, scalable, and efficient environment for model training and inference.\nCreate a Virtual Private Cloud (VPC) Set up a dedicated VPC to isolate your RL infrastructure. Configure subnets, route tables, and internet gateways to enable secure communication. Use Network Access Control Lists (ACLs) and Security Groups to restrict traffic and protect resources. Configure Identity and Access Management (IAM) Create IAM roles with least privilege permissions for EC2 instances, Lambda functions, and other services. Define IAM policies to secure access to resources like S3 buckets and Elastic Compute resources. Enable Multi-Factor Authentication (MFA) for sensitive accounts. Launch EC2 Instances Select appropriate instance types (e.g., GPU-enabled instances) for RL training workloads. Use Amazon Machine Images (AMIs) with pre-installed ML frameworks or configure them manually. Set up SSH access securely and configure monitoring and logging. Set up AWS Lambda Functions Create Lambda functions to automate workflow tasks such as: Triggering training jobs. Processing training results. Managing model deployments. Use event sources such as S3 object uploads or CloudWatch events to invoke Lambda functions. Configure Amazon S3 Buckets Create S3 buckets to store datasets, training results, and model artifacts. Enable versioning and lifecycle policies to manage data retention and cost. Set up bucket policies to control access. Deployment Steps Create a Virtual Private Cloud (VPC) Configure Identity and Access Management (IAM) Launch EC2 Instances Set up AWS Lambda Functions Configure Amazon S3 Buckets "
},
{
	"uri": "//localhost:1313/2-deloyment/3-other-hardware-mfa-device/",
	"title": "Launch EC2 Instances",
	"tags": [],
	"description": "",
	"content": "Launch EC2 Instances for the RL Platform — Hướng dẫn chi tiết Amazon EC2 cung cấp máy chủ ảo linh hoạt, có thể mở rộng để chạy các workload huấn luyện và suy luận Reinforcement Learning.\n1. Đăng nhập vào AWS Management Console Truy cập https://console.aws.amazon.com/ec2 Đăng nhập tài khoản AWS đã có quyền phù hợp. 2. Mở dịch vụ EC2 Trong menu Services, tìm kiếm và chọn EC2 để vào bảng điều khiển quản lý EC2. 3. Bắt đầu tạo Instance mới Nhấn nút Launch Instance để bắt đầu cấu hình máy chủ ảo mới. 4. Chọn Amazon Machine Image (AMI) AMI là bản image hệ điều hành và phần mềm sẵn có. Một số lựa chọn phổ biến: Amazon Linux 2: nhẹ, tích hợp tốt với AWS. Ubuntu Server: phổ biến, hỗ trợ nhiều phần mềm. Deep Learning AMI: đã cài sẵn các framework AI như TensorFlow, PyTorch, rất tiện cho RL. Lưu ý: Chọn AMI phù hợp với workload RL của bạn, đặc biệt nếu cần GPU hoặc các thư viện đặc thù.\n5. Chọn Instance Type Dựa trên nhu cầu tính toán: CPU intensive: loại c5, m5. GPU để huấn luyện RL nhanh: loại p3, g4dn. Xem thông số kỹ thuật (CPU, RAM, GPU, băng thông) để chọn phù hợp. 6. Cấu hình chi tiết Instance Network: Chọn VPC đã tạo (ví dụ RL-Platform-VPC). Subnet: Chọn subnet trong VPC (public hoặc private tùy mục đích). Auto-assign Public IP: Bật nếu bạn cần truy cập instance qua Internet. IAM Role: Gán role đã tạo (ví dụ EC2-RL-Platform-Role) để cấp quyền truy cập tài nguyên AWS. Shutdown behavior: Đặt là Stop hoặc Terminate tùy chính sách. User Data: Có thể viết script bash để tự động cài đặt phần mềm, cập nhật khi khởi động instance (ví dụ: cài Python, thư viện RL). 7. Thêm Storage (EBS Volumes) Định nghĩa dung lượng ổ đĩa (SSD, HDD) cần thiết. Có thể thêm nhiều volume nếu muốn tách dữ liệu và hệ thống. Chọn loại EBS phù hợp: General Purpose SSD (gp3), Provisioned IOPS (io2) nếu cần hiệu năng cao. 8. Cấu hình Security Group (Tường lửa) Tạo hoặc chọn Security Group. Thiết lập rules inbound: Mở cổng SSH (22) chỉ cho IP của bạn để bảo mật. Mở cổng khác nếu ứng dụng RL cần (ví dụ cổng HTTP, HTTPS). Rules outbound mặc định thường mở toàn bộ. 9. Kiểm tra lại và khởi chạy Review toàn bộ thiết lập. Chọn hoặc tạo Key Pair để đăng nhập SSH vào instance: Tải file .pem về và lưu kỹ, dùng để kết nối. Nhấn Launch để tạo instance. Các lưu ý và Best Practices Spot Instances: Nếu muốn tiết kiệm chi phí, dùng Spot Instances nhưng lưu ý có thể bị AWS thu hồi bất ngờ. Monitoring: Kích hoạt Amazon CloudWatch để theo dõi CPU, RAM, đĩa, mạng. Auto Scaling: Sau này có thể cấu hình nhóm Auto Scaling để tự động tăng giảm số lượng instance. Automation: Sử dụng User Data scripts hoặc công cụ cấu hình (Ansible, Terraform) để tự động hóa việc tạo và cấu hình instance. Ví dụ User Data Script (bash) tự động cài đặt Python và thư viện RL #!/bin/bash yum update -y yum install -y python3 git pip3 install --upgrade pip pip3 install tensorflow gym ray[rllib] "
},
{
	"uri": "//localhost:1313/3-reinforcement-learning-model-and-training-pipeline/",
	"title": "Reinforcement Learning Model and Training Pipeline",
	"tags": [],
	"description": "",
	"content": "3. Reinforcement Learning Model and Training Pipeline This section provides a detailed guide on how to build, train, and deploy a Reinforcement Learning (RL) model on AWS.\n3.1 Overview of Reinforcement Learning (RL) Reinforcement Learning is a branch of Machine Learning where an agent learns to make optimal decisions in an environment through rewards and penalties.\nBasic Components:\nComponent Description Agent The decision-making entity that learns behavior Environment The context in which the agent interacts and receives feedback State Information describing the environment’s status at a given time Action Possible choices the agent can make Reward Feedback value used by the agent to adjust its strategy Policy The agent’s strategy for choosing actions based on state 3.2 Popular RL Algorithms Q-Learning / Deep Q-Network (DQN): Learns Q-value tables or uses neural networks to evaluate actions. Policy Gradient: Directly optimizes the action policy using gradient ascent. Actor-Critic: Combines actor networks (action selection) and critic networks (action evaluation). Proximal Policy Optimization (PPO): An improved, stable version of Policy Gradient. 3.3 Building an RL Training Pipeline on AWS 3.3.1 Environment and Data Preparation RL Environment:\nDepending on your problem, use existing environments like OpenAI Gym or create your own.\nExample: CartPole-v1 environment in Gym.\nContainerizing the Environment:\nPackage your code and runtime dependencies into Docker containers for easy deployment on EC2 or EKS.\n3.3.2 Training Deployment on EC2 Choosing Instance Types:\nFor compute-intensive RL tasks, use GPU instances like p3.2xlarge or g4dn.xlarge.\nSoftware Setup:\nInstall Python and RL libraries (Ray RLlib, Stable Baselines3, TensorFlow, PyTorch) Configure IAM roles to allow EC2 access to S3, CloudWatch. Running Training Scripts:\nUse command line or automated scripts to launch training jobs. Example command: python train_rl.py --env CartPole-v1 --timesteps 100000 3.3.3 Monitoring and Storing Results Monitoring:\nUse Amazon CloudWatch to track logs and metrics (reward, loss, training time). Set up alarms to get notified of issues. Storage:\nPeriodically save model checkpoints to Amazon S3 for recovery or deployment. Store training reports and logs for later analysis. 3.3.4 Automation with Lambda and Step Functions AWS Lambda:\nHandle events such as start, pause, or stop training jobs.\nExample: Trigger training jobs automatically when new data is uploaded to S3.\nAWS Step Functions:\nOrchestrate multi-step workflows: data preparation → training → validation → deployment.\n3.3.5 Model Deployment for Inference Model Deployment:\nUse Amazon SageMaker to create real-time prediction endpoints. Alternatively, deploy models on EC2 or ECS. Serving API:\nCreate API Gateway endpoints connected to Lambda or SageMaker to provide inference results to applications.\n3.4 Sample Python Code Using Stable Baselines3 and Gym import gym from stable_baselines3 import PPO def train_model(): env = gym.make(\u0026#34;CartPole-v1\u0026#34;) model = PPO(\u0026#34;MlpPolicy\u0026#34;, env, verbose=1) model.learn(total_timesteps=100000) model.save(\u0026#34;/tmp/ppo_cartpole\u0026#34;) def evaluate_model(): env = gym.make(\u0026#34;CartPole-v1\u0026#34;) model = PPO.load(\u0026#34;/tmp/ppo_cartpole\u0026#34;) obs = env.reset() for _ in range(1000): action, _ = model.predict(obs) obs, reward, done, info = env.step(action) env.render() if done: obs = env.reset() env.close() if __name__ == \u0026#34;__main__\u0026#34;: train_model() evaluate_model() "
},
{
	"uri": "//localhost:1313/4-results/",
	"title": "Results Achieved",
	"tags": [],
	"description": "",
	"content": "Results Achieved After completing the deployment and running the Reinforcement Learning system on AWS, the following key results were obtained:\n1. RL Model Training Outcomes Successful training of the RL model on EC2 instances with high efficiency:\nThe model leveraged GPU-enabled EC2 instances (e.g., p3, g4dn) to accelerate the training process, significantly reducing training time compared to standard servers.\nReal-time training monitoring via AWS CloudWatch:\nMetrics such as average reward, loss function, and training steps are recorded in real time. You can visualize these metrics on CloudWatch dashboards to track training progress and detect issues early. Automated model versioning and storage on Amazon S3:\nEach trained model version is automatically uploaded to a configured S3 bucket, enabling:\nEasy management of model versions. Efficient model recovery and rollback. Seamless deployment and sharing of models across systems. 2. Automation of Operational Workflows Event-driven AWS Lambda functions:\nLambda functions are triggered automatically by events such as new model uploads to S3 or training completion notifications. This facilitates:\nPost-processing tasks like model quality checks. Sending notifications via email, Slack, or SMS. Triggering subsequent CI/CD pipeline stages. EventBridge and CloudWatch Alarms:\nAutomated monitoring of AWS resource health with alerts and remediation triggers. Ensures continuous system operation and minimizes downtime. 3. Enhanced Security and Access Management IAM roles and policies implemented following the principle of least privilege:\nAll AWS components (EC2, Lambda, S3, etc.) have only the minimum permissions necessary to operate. This reduces security risks from leaked credentials or attacks. Multi-Factor Authentication (MFA):\nAdds a second layer of protection to AWS admin accounts, preventing unauthorized access. Comprehensive audit logs with CloudTrail:\nAll access and configuration changes are recorded, aiding in security monitoring and incident investigation. 4. Visualizing Training Results 4.1 Loss Curve Chart This chart shows the decrease in loss over training epochs, indicating effective model learning.\n4.2 Summary Table of Key Metrics Epoch Average Reward Loss Training Time (minutes) 1 10.5 0.45 15 10 23.7 0.20 150 50 45.9 0.08 750 5. Practical Benefits Accelerated model development and experimentation:\nAWS enables fast deployment with easy scalability to match resource needs.\nStable and secure operations:\nCentralized architecture with strong security and automated alerts reduces risks.\nEasy integration and extensibility:\nComponents like Lambda, S3, and EventBridge enable building complex, automated pipelines end-to-end.\n"
},
{
	"uri": "//localhost:1313/2-deloyment/4-setting-up-aws-lambda/",
	"title": "Set up AWS Lambda Functions",
	"tags": [],
	"description": "",
	"content": "Setting up AWS Lambda Functions — Hướng dẫn chi tiết AWS Lambda là dịch vụ tính toán serverless cho phép bạn chạy code mà không cần quản lý máy chủ. Lambda rất phù hợp để xử lý các event backend trong nền tảng RL của bạn.\n1. Đăng nhập vào AWS Management Console Truy cập https://console.aws.amazon.com/lambda Đăng nhập tài khoản có quyền tạo Lambda. 2. Điều hướng đến dịch vụ Lambda Trong menu Services, tìm và chọn Lambda. 3. Tạo function mới Nhấn nút Create function để bắt đầu tạo hàm Lambda. 4. Chọn cách tạo function Author from scratch:\nTên function ví dụ: RL-DataProcessor Runtime: Python 3.x, Node.js, Java, hoặc runtime phù hợp với code bạn muốn chạy. Execution role: chọn role có quyền phù hợp hoặc tạo mới. Use a blueprint:\nChọn mẫu có sẵn để nhanh chóng khởi tạo. Browse serverless app repository:\nDùng app serverless cộng đồng. 5. Cấu hình chi tiết function Function name: ví dụ RL-DataProcessor Runtime: Python 3.8 (hoặc phiên bản bạn cần) Permissions: Tạo hoặc chọn IAM Role có quyền truy cập các dịch vụ AWS cần thiết như S3, CloudWatch. Role này quyết định Lambda có thể làm gì (đọc ghi S3, ghi log CloudWatch, \u0026hellip;). 6. Viết hoặc upload mã nguồn Bạn có thể viết trực tiếp trong AWS Console hoặc upload file ZIP chứa code. Ví dụ function Python đơn giản: def lambda_handler(event, context): print(\u0026#34;Received event:\u0026#34;, event) # Xử lý dữ liệu RL tại đây return {\u0026#34;statusCode\u0026#34;: 200, \u0026#34;body\u0026#34;: \u0026#34;Success\u0026#34;} "
},
{
	"uri": "//localhost:1313/5-cleanup/",
	"title": "Cleanup Resources",
	"tags": [],
	"description": "",
	"content": "5. Cleanup Resources After completing your Reinforcement Learning deployment and experiments on AWS, it is important to clean up your resources to avoid unnecessary charges and keep your environment tidy.\nSteps to Clean Up AWS Resources Terminate EC2 Instances\nGo to the EC2 Dashboard. Select the instances you launched for your RL workloads. Click Actions → Instance State → Terminate. Delete S3 Buckets and Objects\nNavigate to the S3 Console. Select the buckets created for your project. Delete all objects inside the buckets. Delete the buckets themselves. Remove IAM Roles and Users\nOpen the IAM Console. Detach policies from roles and users created for the RL platform. Delete those roles, users, and groups if no longer needed. Delete Lambda Functions\nIn the Lambda Console, select functions used in your RL workflows. Delete the unnecessary functions. Clean Up Other Services\nDelete any other AWS resources provisioned for your RL project, such as: CloudWatch log groups Step Functions state machines API Gateway endpoints VPCs, subnets, security groups (if dedicated to this project) Best Practices Regularly review your AWS account for unused resources. Enable AWS Cost Explorer and set budget alerts to monitor your spending. Automate cleanup with scripts or AWS tools like AWS CLI and CloudFormation stack deletions when possible. "
},
{
	"uri": "//localhost:1313/2-deloyment/5--configure-amazon-s3-buckets/",
	"title": "Configure Amazon S3 Buckets",
	"tags": [],
	"description": "",
	"content": "Configure Amazon S3 Buckets Amazon Simple Storage Service (S3) is an object storage service that offers industry-leading scalability, data availability, security, and performance. It is widely used to store data for websites, mobile apps, backup and restore, archive, enterprise applications, IoT devices, and big data analytics.\n1. Create an S3 Bucket Sign in to the AWS Management Console. Click Create bucket. Enter a globally unique Bucket name. Choose the Region closest to your users or your AWS resources. Configure options such as versioning, encryption, and tags if needed. Set Bucket permissions carefully to control public or private access. Click Create bucket. 2. Create Folders (Prefixes) within the Bucket Although S3 doesn’t have real folders, you can simulate them by using prefixes. When uploading objects, include the folder path in the key name (e.g., logs/2025/08/13/logfile.txt). You can also create empty folders in the AWS Console by creating a zero-byte object with a key ending with a slash (folder-name/). 3. Upload and Manage Data Upload files via the AWS Management Console, AWS CLI, or SDKs. To upload with CLI, use: aws s3 cp /local/path/file.txt s3://your-bucket-name/folder/ "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]